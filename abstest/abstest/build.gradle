/*
buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.4.1'
    }
}
*/
repositories {
	mavenCentral()
	mavenRepo url: 'http://twitter4j.org/maven2'
}

apply plugin: 'android'

//see http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
    apt
}
/*
println "------------------------------------"
println "apt="+configurations.apt.dump()
println "------------------------------------"
*/

androidAnnotationsVersion='2.7.1'
dependencies {
    //compile files('libs/android-support-v4.jar')
    compile fileTree(dir: 'libs', includes: ['*.jar'])
/*
    //[NOTE]not ref settings def
    compile project( library_name  as String)
    compile project( library_name2 as String)
*/
    lib_abs = project(':abs');
    compile lib_abs
    lib_yutori = project(':yutori');
    compile lib_yutori

	compile "org.twitter4j:twitter4j-core:3.0.4-SNAPSHOT" //DL from maven

    //[NOTE]see  http://stackoverflow.com/questions/16683944/androidannotations-nothing-generated-empty-activity/16802216#16802216
	//println "androidAnnotationsVersion=$androidAnnotationsVersion"
	apt "com.googlecode.androidannotations:androidannotations:$androidAnnotationsVersion" 
	compile "com.googlecode.androidannotations:androidannotations-api:$androidAnnotationsVersion"
	
	
    //[NOTE]see http://d.hatena.ne.jp/esmasui/20130607/1370574632
    apt "net.vvakame:jsonpullparser-apt:${jppVersion}"
    compile "net.vvakame:jsonpullparser-core:${jppVersion}"
}



//println "dependencies=" + dependencies*.dump()
/*
task list(dependsOn: configurations.compile) {
     println "classpath = ${configurations.compile.collect {File file -> file.getAbsolutePath()}}"
}
*/

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 4
        targetSdkVersion 17
    }
/*	
	tasks.withType(Compile) {
   	   options.encoding = 'UTF-8' 
   	}
*/	   

	//see http://d.hatena.ne.jp/taichitaichi/20120110/1326175750
	// It also testCompile and become the object that it is this way of writing
	def encoding = { it.encoding = 'UTF-8'}
	tasks.withType (AbstractCompile) each {
		encoding it.options
	}
}

//[TODO]
// reference http://zaki.tdiary.net/20130620.html#p01
//
//  but AndroidManifest.xml edit need
//
//   <activity
//         android:name=".MainActivity_"  //â˜† need [_]
//
//  see http://stackoverflow.com/questions/15768684/androidannotations2-7-1-androidmanifest-xml-file-contains-the-original-compone

android.applicationVariants.all { variant ->
    //def aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
	def aptOutput = file("${project.buildDir}/source/r/${variant.dirName}")
//    println "****************************"
//    println "variant: ${variant.name}"
//    println "manifest:  ${variant.processResources.manifestFile}"
//    println "aptOutput:  ${aptOutput}"
//    println "processorpath:  ${configurations.apt.getAsPath()}"
//    println "****************************"

    variant.javaCompile.doFirst {
		println "*** compile doFirst ${variant.name}, aptOutput=${aptOutput}"
		aptOutput.mkdirs()
		
		// Keep off if the old file exists because it is an error in the incremental build
        aptOutput.eachFileRecurse groovy.io.FileType.FILES, {
            if (it.name.equals('R.java')) {
                return
            }
            it.delete()
        }
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                "-AJsonPullParserClassPostfix=Gererated",
				"-AJsonPullParserDebug=true",
				'-s', aptOutput
        ]
    }
}

android.applicationVariants.all { variant ->
	def versionName = variant.mergedFlavor.versionName + (variant.buildType.versionNameSuffix != null ? variant.buildType.versionNameSuffix : "")
	variant.generateBuildConfig.javaLines += "public static final String VERSION_NAME = \"${versionName}\";".toString()
}




/*
task apiJar(dependsOn: classes, type: Jar) {
    classifier = 'api'
}
*/
