/*
buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.4.1'
    }
}
*/
repositories {
	mavenCentral()
	mavenRepo url: 'http://twitter4j.org/maven2'
}

apply plugin: 'android'

//see http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
    apt//{
	//	transitive = false
	//}
}
println "------------------------------------"
println "apt="+configurations.apt.dump()
println "------------------------------------"

androidAnnotationsVersion='2.7.1'
dependencies {
    //compile files('libs/android-support-v4.jar')
    compile fileTree(dir: 'libs', includes: ['*.jar'])
/*
    compile project( library_name  as String)
    compile project( library_name2 as String)
*/
    lib_abs = project(':abs');
    compile lib_abs
    lib_yutori = project(':yutori');
    compile lib_yutori

	compile "org.twitter4j:twitter4j-core:3.0.4-SNAPSHOT" //mavenからDLする記述
	
	println "androidAnnotationsVersion=$androidAnnotationsVersion"
	apt "com.googlecode.androidannotations:androidannotations:$androidAnnotationsVersion" 
	compile "com.googlecode.androidannotations:androidannotations-api:$androidAnnotationsVersion"
}
//println "dependencies=" + dependencies*.dump()
task list(dependsOn: configurations.compile) {
     println "classpath = ${configurations.compile.collect {File file -> file.getAbsolutePath()}}"
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 4
        targetSdkVersion 17
    }
	
	tasks.withType(Compile) {
   	   options.encoding = 'UTF-8' 
   	}
}

//[TODO]ココでエラー＞＜ 保留
/*
android.applicationVariants.each { variant ->
    aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "processorpath:  ${configurations.apt.getAsPath()}"
    println "****************************"

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}"
        aptOutput.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', aptOutput
        ]
    }
}
*/

/*
build.doFirst{
    println "=======buiild start======="
}

build.doLast{
    println "=======buiild end======="
}
*/


/*
task apiJar(dependsOn: classes, type: Jar) {
    classifier = 'api'
}
*/
